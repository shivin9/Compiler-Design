A = program, a = eps
A = program, a = TK_FUNID
A = program, a = TK_MAIN
A = program, a = eps
A = program, a = TK_FUNID
A = program, a = TK_MAIN
A = mainFunction, a = TK_MAIN
A = otherFunctions, a = eps
A = otherFunctions, a = TK_FUNID
A = otherFunctions, a = TK_FUNID
A = otherFunctions, a = eps
A = otherFunctions, a = TK_FUNID
A = otherFunctions, a = TK_END
A = function, a = TK_FUNID
A = input_par, a = TK_INPUT
A = output_par, a = TK_OUTPUT
A = output_par, a = eps
A = output_par, a = TK_ENDRECORD
A = output_par, a = TK_OUTPUT
A = output_par, a = eps
A = output_par, a = TK_END
A = parameter_list, a = TK_INT
A = parameter_list, a = TK_REAL
A = parameter_list, a = TK_RECORD
A = dataType, a = TK_INT
A = dataType, a = TK_REAL
A = dataType, a = TK_RECORD
A = dataType, a = TK_INT
A = dataType, a = TK_REAL
A = dataType, a = TK_RECORD
A = primitiveDatatype, a = TK_INT
A = primitiveDatatype, a = TK_REAL
A = primitiveDatatype, a = TK_INT
A = primitiveDatatype, a = TK_REAL
A = constructedDatatype, a = TK_RECORD
A = remaining_list, a = TK_COMMA
A = remaining_list, a = eps
A = remaining_list, a = TK_WRITE
A = remaining_list, a = TK_OP
A = remaining_list, a = TK_NOT
A = remaining_list, a = TK_NUM
A = remaining_list, a = TK_RNUM
A = remaining_list, a = TK_ENDIF
A = remaining_list, a = TK_ELSE
A = remaining_list, a = TK_ENDWHILE
A = remaining_list, a = TK_RETURN
A = remaining_list, a = TK_CL
A = remaining_list, a = TK_COMMA
A = remaining_list, a = eps
A = remaining_list, a = TK_END
A = stmts, a = eps
A = stmts, a = TK_RECORD
A = stmts, a = TK_TYPE
A = stmts, a = TK_RETURN
A = stmts, a = TK_ID
A = stmts, a = TK_IF
A = stmts, a = TK_CALL
A = stmts, a = TK_SQL
A = stmts, a = TK_WHILE
A = stmts, a = TK_READ
A = stmts, a = TK_WRITE
A = stmts, a = eps
A = stmts, a = TK_RECORD
A = stmts, a = eps
A = stmts, a = TK_TYPE
A = stmts, a = eps
A = stmts, a = TK_ID
A = stmts, a = TK_IF
A = stmts, a = TK_CALL
A = stmts, a = TK_SQL
A = stmts, a = TK_WHILE
A = stmts, a = TK_READ
A = stmts, a = TK_WRITE
A = stmts, a = TK_RETURN
A = typeDefinitions, a = eps
A = typeDefinitions, a = TK_RECORD
A = typeDefinitions, a = TK_RECORD
A = typeDefinitions, a = eps
A = typeDefinitions, a = TK_RECORD
A = typeDefinitions, a = TK_END
A = typeDefinition, a = TK_RECORD
A = fieldDefinitions, a = TK_TYPE
A = fieldDefinition, a = TK_TYPE
A = moreFields, a = eps
A = moreFields, a = TK_TYPE
A = moreFields, a = TK_TYPE
A = moreFields, a = eps
A = moreFields, a = TK_TYPE
A = moreFields, a = TK_END
A = declarations, a = eps
A = declarations, a = TK_TYPE
A = declarations, a = TK_TYPE
A = declarations, a = eps
A = declarations, a = TK_TYPE
A = declarations, a = TK_END
A = declaration, a = TK_TYPE
A = global_or_not, a = TK_GLOBAL
A = global_or_not, a = eps
A = global_or_not, a = TK_ID
A = global_or_not, a = TK_IF
A = global_or_not, a = TK_CALL
A = global_or_not, a = TK_SQL
A = global_or_not, a = TK_WHILE
A = global_or_not, a = TK_READ
A = global_or_not, a = TK_WRITE
A = global_or_not, a = TK_OP
A = global_or_not, a = TK_GLOBAL
A = global_or_not, a = eps
A = global_or_not, a = TK_END
A = otherStmts, a = eps
A = otherStmts, a = TK_ID
A = otherStmts, a = TK_IF
A = otherStmts, a = TK_CALL
A = otherStmts, a = TK_SQL
A = otherStmts, a = TK_WHILE
A = otherStmts, a = TK_READ
A = otherStmts, a = TK_WRITE
A = otherStmts, a = TK_ID
A = otherStmts, a = TK_IF
A = otherStmts, a = TK_CALL
A = otherStmts, a = TK_SQL
A = otherStmts, a = eps
A = otherStmts, a = TK_WHILE
A = otherStmts, a = TK_READ
A = otherStmts, a = TK_WRITE
A = otherStmts, a = eps
A = otherStmts, a = TK_ID
A = otherStmts, a = TK_IF
A = otherStmts, a = TK_CALL
A = otherStmts, a = TK_SQL
A = otherStmts, a = TK_WHILE
A = otherStmts, a = TK_READ
A = otherStmts, a = TK_WRITE
A = otherStmts, a = eps
A = otherStmts, a = TK_FUNID
A = otherStmts, a = TK_MAIN
A = otherStmts, a = eps
A = otherStmts, a = TK_FUNID
A = otherStmts, a = TK_MAIN
A = otherStmts, a = eps
A = otherStmts, a = TK_FUNID
A = otherStmts, a = TK_MAIN
A = otherStmts, a = eps
A = otherStmts, a = TK_FUNID
A = otherStmts, a = TK_MAIN
A = otherStmts, a = eps
A = otherStmts, a = TK_FUNID
A = otherStmts, a = TK_MAIN
A = otherStmts, a = eps
A = otherStmts, a = TK_FUNID
A = otherStmts, a = TK_MAIN
A = otherStmts, a = eps
A = otherStmts, a = TK_ID
A = otherStmts, a = TK_IF
A = otherStmts, a = TK_CALL
A = otherStmts, a = TK_SQL
A = otherStmts, a = TK_WHILE
A = otherStmts, a = TK_READ
A = otherStmts, a = TK_WRITE
A = otherStmts, a = TK_END
A = stmt, a = TK_ID
A = stmt, a = TK_IF
A = stmt, a = TK_CALL
A = stmt, a = TK_SQL
A = stmt, a = eps
A = stmt, a = TK_WHILE
A = stmt, a = TK_READ
A = stmt, a = TK_WRITE
A = stmt, a = TK_ID
A = stmt, a = TK_ID
A = stmt, a = TK_IF
A = stmt, a = TK_CALL
A = stmt, a = TK_SQL
A = stmt, a = eps
A = stmt, a = TK_WHILE
A = stmt, a = TK_READ
A = stmt, a = TK_WRITE
A = stmt, a = TK_WHILE
A = stmt, a = TK_ID
A = stmt, a = TK_IF
A = stmt, a = TK_CALL
A = stmt, a = TK_SQL
A = stmt, a = eps
A = stmt, a = TK_WHILE
A = stmt, a = TK_READ
A = stmt, a = TK_WRITE
A = stmt, a = TK_IF
A = stmt, a = TK_ID
A = stmt, a = TK_IF
A = stmt, a = TK_CALL
A = stmt, a = TK_SQL
A = stmt, a = eps
A = stmt, a = TK_WHILE
A = stmt, a = TK_READ
A = stmt, a = TK_WRITE
A = stmt, a = TK_READ
A = stmt, a = TK_WRITE
A = stmt, a = TK_ID
A = stmt, a = TK_IF
A = stmt, a = TK_CALL
A = stmt, a = TK_SQL
A = stmt, a = eps
A = stmt, a = TK_WHILE
A = stmt, a = TK_READ
A = stmt, a = TK_WRITE
A = stmt, a = TK_CALL
A = stmt, a = TK_SQL
A = stmt, a = eps
A = stmt, a = eps
A = stmt, a = TK_FUNID
A = stmt, a = TK_MAIN
A = stmt, a = eps
A = stmt, a = TK_FUNID
A = stmt, a = TK_MAIN
A = stmt, a = eps
A = stmt, a = TK_FUNID
A = stmt, a = TK_MAIN
A = stmt, a = eps
A = stmt, a = TK_FUNID
A = stmt, a = TK_MAIN
A = stmt, a = eps
A = stmt, a = TK_FUNID
A = stmt, a = TK_MAIN
A = stmt, a = eps
A = stmt, a = TK_FUNID
A = stmt, a = TK_MAIN
A = stmt, a = eps
A = stmt, a = TK_FUNID
A = stmt, a = TK_MAIN
A = assignmentStmt, a = TK_ID
A = singleOrRecId, a = TK_ID
A = new_24, a = TK_DOT
A = new_24, a = eps
A = new_24, a = TK_NOT
A = new_24, a = TK_NUM
A = new_24, a = TK_RNUM
A = new_24, a = TK_ENDIF
A = new_24, a = TK_ELSE
A = new_24, a = TK_ENDWHILE
A = new_24, a = TK_RETURN
A = new_24, a = TK_CALL
A = new_24, a = TK_DOT
A = new_24, a = eps
A = new_24, a = TK_END
A = funCallStmt, a = TK_CALL
A = funCallStmt, a = TK_SQL
A = funCallStmt, a = eps
A = funCallStmt, a = TK_SQL
A = funCallStmt, a = eps
A = funCallStmt, a = TK_ENDIF
A = funCallStmt, a = TK_ELSE
A = funCallStmt, a = TK_ENDWHILE
A = funCallStmt, a = TK_RETURN
A = outputParameters, a = TK_SQL
A = outputParameters, a = eps
A = outputParameters, a = TK_NUM
A = outputParameters, a = TK_RNUM
A = outputParameters, a = TK_ENDIF
A = outputParameters, a = TK_ELSE
A = outputParameters, a = TK_ENDWHILE
A = outputParameters, a = TK_RETURN
A = outputParameters, a = TK_CL
A = outputParameters, a = TK_ASSIGNOP
A = outputParameters, a = TK_SQL
A = outputParameters, a = eps
A = outputParameters, a = TK_END
A = inputParameters, a = TK_SQL
A = iterativeStmt, a = TK_WHILE
A = conditionalStmt, a = TK_IF
A = elsePart, a = TK_ELSE
A = elsePart, a = TK_ENDIF
A = elsePart, a = TK_ELSE
A = elsePart, a = TK_ENDIF
A = ioStmt, a = TK_READ
A = ioStmt, a = TK_WRITE
A = ioStmt, a = TK_READ
A = ioStmt, a = TK_WRITE
A = allVar, a = TK_RECORDID
A = allVar, a = TK_ID
A = allVar, a = TK_NUM
A = allVar, a = TK_RNUM
A = allVar, a = TK_RECORDID
A = allVar, a = TK_ID
A = allVar, a = TK_NUM
A = allVar, a = TK_RNUM
A = arithmeticExpression, a = TK_OP
A = arithmeticExpression, a = TK_ID
A = arithmeticExpression, a = TK_NUM
A = arithmeticExpression, a = TK_RNUM
A = arithmeticExpression, a = TK_RECORDID
A = expPrime, a = eps
A = expPrime, a = TK_PLUS
A = expPrime, a = TK_MINUS
A = expPrime, a = TK_PLUS
A = expPrime, a = TK_MINUS
A = expPrime, a = eps
A = expPrime, a = TK_PLUS
A = expPrime, a = TK_MINUS
A = expPrime, a = TK_END
A = term, a = TK_OP
A = term, a = TK_ID
A = term, a = TK_NUM
A = term, a = TK_RNUM
A = term, a = TK_RECORDID
A = termPrime, a = eps
A = termPrime, a = TK_MUL
A = termPrime, a = TK_DIV
A = termPrime, a = TK_MUL
A = termPrime, a = TK_DIV
A = termPrime, a = eps
A = termPrime, a = TK_MUL
A = termPrime, a = TK_DIV
A = termPrime, a = TK_END
A = factor, a = TK_OP
A = factor, a = TK_ID
A = factor, a = TK_NUM
A = factor, a = TK_RNUM
A = factor, a = TK_RECORDID
A = factor, a = TK_OP
A = factor, a = TK_ID
A = factor, a = TK_NUM
A = factor, a = TK_RNUM
A = factor, a = TK_RECORDID
A = highPrecedenceOperators, a = TK_MUL
A = highPrecedenceOperators, a = TK_DIV
A = highPrecedenceOperators, a = TK_MUL
A = highPrecedenceOperators, a = TK_DIV
A = lowPrecedenceOperators, a = TK_PLUS
A = lowPrecedenceOperators, a = TK_MINUS
A = lowPrecedenceOperators, a = TK_PLUS
A = lowPrecedenceOperators, a = TK_MINUS
A = all, a = TK_ID
A = all, a = TK_NUM
A = all, a = TK_RNUM
A = all, a = TK_RECORDID
A = all, a = TK_ID
A = all, a = TK_NUM
A = all, a = TK_RNUM
A = all, a = TK_RECORDID
A = all, a = TK_ID
A = all, a = TK_NUM
A = all, a = TK_RNUM
A = all, a = TK_RECORDID
A = all, a = TK_ID
A = all, a = TK_NUM
A = all, a = TK_RNUM
A = all, a = TK_RECORDID
A = temp, a = eps
A = temp, a = TK_DOT
A = temp, a = TK_END
A = temp, a = eps
A = temp, a = TK_DOT
A = temp, a = TK_NOT
A = temp, a = TK_NUM
A = temp, a = TK_RNUM
A = temp, a = TK_ENDIF
A = temp, a = TK_ELSE
A = temp, a = TK_ENDWHILE
A = temp, a = TK_RETURN
A = temp, a = TK_CALL
A = booleanExpression, a = TK_OP
A = booleanExpression, a = TK_NOT
A = booleanExpression, a = TK_ID
A = booleanExpression, a = TK_NUM
A = booleanExpression, a = TK_RNUM
A = booleanExpression, a = TK_OP
A = booleanExpression, a = TK_NOT
A = booleanExpression, a = TK_ID
A = booleanExpression, a = TK_NUM
A = booleanExpression, a = TK_RNUM
A = booleanExpression, a = TK_OP
A = booleanExpression, a = TK_NOT
A = booleanExpression, a = TK_ID
A = booleanExpression, a = TK_NUM
A = booleanExpression, a = TK_RNUM
A = var, a = TK_ID
A = var, a = TK_NUM
A = var, a = TK_RNUM
A = var, a = TK_ID
A = var, a = TK_NUM
A = var, a = TK_RNUM
A = var, a = TK_ID
A = var, a = TK_NUM
A = var, a = TK_RNUM
A = logicalOp, a = TK_AND
A = logicalOp, a = TK_OR
A = logicalOp, a = TK_AND
A = logicalOp, a = TK_OR
A = relationalOp, a = TK_LT
A = relationalOp, a = TK_LE
A = relationalOp, a = TK_EQ
A = relationalOp, a = TK_GT
A = relationalOp, a = TK_GE
A = relationalOp, a = TK_NE
A = relationalOp, a = TK_LT
A = relationalOp, a = TK_LE
A = relationalOp, a = TK_EQ
A = relationalOp, a = TK_GT
A = relationalOp, a = TK_GE
A = relationalOp, a = TK_NE
A = relationalOp, a = TK_LT
A = relationalOp, a = TK_LE
A = relationalOp, a = TK_EQ
A = relationalOp, a = TK_GT
A = relationalOp, a = TK_GE
A = relationalOp, a = TK_NE
A = relationalOp, a = TK_LT
A = relationalOp, a = TK_LE
A = relationalOp, a = TK_EQ
A = relationalOp, a = TK_GT
A = relationalOp, a = TK_GE
A = relationalOp, a = TK_NE
A = relationalOp, a = TK_LT
A = relationalOp, a = TK_LE
A = relationalOp, a = TK_EQ
A = relationalOp, a = TK_GT
A = relationalOp, a = TK_GE
A = relationalOp, a = TK_NE
A = relationalOp, a = TK_LT
A = relationalOp, a = TK_LE
A = relationalOp, a = TK_EQ
A = relationalOp, a = TK_GT
A = relationalOp, a = TK_GE
A = relationalOp, a = TK_NE
A = returnStmt, a = TK_RETURN
A = optionalReturn, a = TK_SQL
A = optionalReturn, a = eps
A = optionalReturn, a = TK_NUM
A = optionalReturn, a = TK_RNUM
A = optionalReturn, a = TK_ENDIF
A = optionalReturn, a = TK_ELSE
A = optionalReturn, a = TK_ENDWHILE
A = optionalReturn, a = TK_RETURN
A = optionalReturn, a = TK_CL
A = optionalReturn, a = TK_ASSIGNOP
A = optionalReturn, a = TK_SQL
A = optionalReturn, a = eps
A = optionalReturn, a = TK_END
A = idList, a = TK_ID
A = more_ids, a = TK_COMMA
A = more_ids, a = eps
A = more_ids, a = TK_WRITE
A = more_ids, a = TK_OP
A = more_ids, a = TK_NOT
A = more_ids, a = TK_NUM
A = more_ids, a = TK_RNUM
A = more_ids, a = TK_ENDIF
A = more_ids, a = TK_ELSE
A = more_ids, a = TK_ENDWHILE
A = more_ids, a = TK_RETURN
A = more_ids, a = TK_CL
A = more_ids, a = TK_COMMA
A = more_ids, a = eps
A = more_ids, a = TK_END
[program, TK_FUNID] -> 0
[program, TK_MAIN] -> 0
[mainFunction, TK_MAIN] -> 1
[otherFunctions, TK_FUNID] -> 2
[otherFunctions, TK_END] -> 3
[function, TK_FUNID] -> 4
[input_par, TK_INPUT] -> 5
[output_par, TK_OUTPUT] -> 6
[output_par, TK_ENDRECORD] -> 6
[output_par, TK_END] -> 7
[parameter_list, TK_INT] -> 8
[parameter_list, TK_REAL] -> 8
[parameter_list, TK_RECORD] -> 8
[dataType, TK_INT] -> 9
[dataType, TK_REAL] -> 9
[dataType, TK_RECORD] -> 9
[primitiveDatatype, TK_INT] -> 11
[primitiveDatatype, TK_REAL] -> 11
[constructedDatatype, TK_RECORD] -> 13
[remaining_list, TK_COMMA] -> 14
[remaining_list, TK_WRITE] -> 14
[remaining_list, TK_OP] -> 14
[remaining_list, TK_NOT] -> 14
[remaining_list, TK_NUM] -> 14
[remaining_list, TK_RNUM] -> 14
[remaining_list, TK_ENDIF] -> 14
[remaining_list, TK_ELSE] -> 14
[remaining_list, TK_ENDWHILE] -> 14
[remaining_list, TK_RETURN] -> 14
[remaining_list, TK_CL] -> 14
[stmts, TK_RECORD] -> 16
[stmts, TK_TYPE] -> 16
[stmts, TK_RETURN] -> 16
[stmts, TK_ID] -> 16
[stmts, TK_IF] -> 16
[stmts, TK_CALL] -> 16
[stmts, TK_SQL] -> 16
[stmts, TK_WHILE] -> 16
[stmts, TK_READ] -> 16
[stmts, TK_WRITE] -> 16
[typeDefinitions, TK_RECORD] -> 17
[typeDefinitions, TK_END] -> 18
[typeDefinition, TK_RECORD] -> 19
[fieldDefinitions, TK_TYPE] -> 20
[fieldDefinition, TK_TYPE] -> 21
[moreFields, eps] -> 22
[moreFields, TK_TYPE] -> 22
[moreFields, TK_END] -> 23
[declarations, eps] -> 24
[declarations, TK_TYPE] -> 24
[declarations, TK_END] -> 25
[declaration, TK_TYPE] -> 26
[global_or_not, TK_GLOBAL] -> 27
[global_or_not, eps] -> 27
[global_or_not, TK_ID] -> 27
[global_or_not, TK_IF] -> 27
[global_or_not, TK_CALL] -> 27
[global_or_not, TK_SQL] -> 27
[global_or_not, TK_WHILE] -> 27
[global_or_not, TK_READ] -> 27
[global_or_not, TK_WRITE] -> 27
[global_or_not, TK_OP] -> 27
[global_or_not, TK_END] -> 28
[otherStmts, eps] -> 29
[otherStmts, TK_ID] -> 29
[otherStmts, TK_IF] -> 29
[otherStmts, TK_CALL] -> 29
[otherStmts, TK_SQL] -> 29
[otherStmts, TK_WHILE] -> 29
[otherStmts, TK_READ] -> 29
[otherStmts, TK_WRITE] -> 29
[otherStmts, TK_FUNID] -> 29
[otherStmts, TK_MAIN] -> 29
[otherStmts, TK_ENDIF] -> 29
[otherStmts, TK_ELSE] -> 29
[otherStmts, TK_ENDWHILE] -> 29
[otherStmts, TK_RETURN] -> 29
[otherStmts, TK_END] -> 30
[stmt, TK_ID] -> 31
[stmt, TK_IF] -> 31
[stmt, TK_CALL] -> 31
[stmt, TK_SQL] -> 31
[stmt, eps] -> 31
[stmt, TK_WHILE] -> 31
[stmt, TK_READ] -> 31
[stmt, TK_WRITE] -> 31
[stmt, TK_FUNID] -> 35
[stmt, TK_MAIN] -> 35
[stmt, TK_OP] -> 35
[stmt, TK_NOT] -> 35
[stmt, TK_NUM] -> 35
[stmt, TK_RNUM] -> 35
[stmt, TK_ENDIF] -> 35
[stmt, TK_ELSE] -> 35
[stmt, TK_ENDWHILE] -> 35
[stmt, TK_RETURN] -> 35
[assignmentStmt, TK_ID] -> 36
[singleOrRecId, TK_ID] -> 37
[new_24, TK_DOT] -> 38
[new_24, eps] -> 38
[new_24, TK_NOT] -> 38
[new_24, TK_NUM] -> 38
[new_24, TK_RNUM] -> 38
[new_24, TK_ENDIF] -> 38
[new_24, TK_ELSE] -> 38
[new_24, TK_ENDWHILE] -> 38
[new_24, TK_RETURN] -> 38
[new_24, TK_CALL] -> 38
[new_24, TK_END] -> 39
[funCallStmt, TK_CALL] -> 40
[funCallStmt, TK_SQL] -> 40
[funCallStmt, eps] -> 40
[funCallStmt, TK_ENDIF] -> 40
[funCallStmt, TK_ELSE] -> 40
[funCallStmt, TK_ENDWHILE] -> 40
[funCallStmt, TK_RETURN] -> 40
[outputParameters, TK_SQL] -> 41
[outputParameters, eps] -> 41
[outputParameters, TK_NUM] -> 41
[outputParameters, TK_RNUM] -> 41
[outputParameters, TK_ENDIF] -> 41
[outputParameters, TK_ELSE] -> 41
[outputParameters, TK_ENDWHILE] -> 41
[outputParameters, TK_RETURN] -> 41
[outputParameters, TK_CL] -> 41
[outputParameters, TK_ASSIGNOP] -> 41
[outputParameters, TK_END] -> 42
[inputParameters, TK_SQL] -> 43
[iterativeStmt, TK_WHILE] -> 44
[conditionalStmt, TK_IF] -> 45
[elsePart, TK_ELSE] -> 46
[elsePart, TK_ENDIF] -> 46
[ioStmt, TK_READ] -> 48
[ioStmt, TK_WRITE] -> 48
[allVar, TK_RECORDID] -> 50
[allVar, TK_ID] -> 50
[allVar, TK_NUM] -> 50
[allVar, TK_RNUM] -> 50
[arithmeticExpression, TK_OP] -> 52
[arithmeticExpression, TK_ID] -> 52
[arithmeticExpression, TK_NUM] -> 52
[arithmeticExpression, TK_RNUM] -> 52
[arithmeticExpression, TK_RECORDID] -> 52
[expPrime, eps] -> 53
[expPrime, TK_PLUS] -> 53
[expPrime, TK_MINUS] -> 53
[expPrime, TK_END] -> 54
[term, TK_OP] -> 55
[term, TK_ID] -> 55
[term, TK_NUM] -> 55
[term, TK_RNUM] -> 55
[term, TK_RECORDID] -> 55
[termPrime, eps] -> 56
[termPrime, TK_MUL] -> 56
[termPrime, TK_DIV] -> 56
[termPrime, TK_END] -> 57
[factor, TK_OP] -> 58
[factor, TK_ID] -> 58
[factor, TK_NUM] -> 58
[factor, TK_RNUM] -> 58
[factor, TK_RECORDID] -> 58
[highPrecedenceOperators, TK_MUL] -> 60
[highPrecedenceOperators, TK_DIV] -> 60
[lowPrecedenceOperators, TK_PLUS] -> 62
[lowPrecedenceOperators, TK_MINUS] -> 62
[all, TK_ID] -> 64
[all, TK_NUM] -> 64
[all, TK_RNUM] -> 64
[all, TK_RECORDID] -> 64
[temp, eps] -> 68
[temp, TK_DOT] -> 68
[temp, TK_END] -> 68
[temp, TK_NOT] -> 69
[temp, TK_NUM] -> 69
[temp, TK_RNUM] -> 69
[temp, TK_ENDIF] -> 69
[temp, TK_ELSE] -> 69
[temp, TK_ENDWHILE] -> 69
[temp, TK_RETURN] -> 69
[temp, TK_CALL] -> 69
[booleanExpression, TK_OP] -> 70
[booleanExpression, TK_NOT] -> 70
[booleanExpression, TK_ID] -> 70
[booleanExpression, TK_NUM] -> 70
[booleanExpression, TK_RNUM] -> 70
[var, TK_ID] -> 73
[var, TK_NUM] -> 73
[var, TK_RNUM] -> 73
[logicalOp, TK_AND] -> 76
[logicalOp, TK_OR] -> 76
[relationalOp, TK_LT] -> 78
[relationalOp, TK_LE] -> 78
[relationalOp, TK_EQ] -> 78
[relationalOp, TK_GT] -> 78
[relationalOp, TK_GE] -> 78
[relationalOp, TK_NE] -> 78
[returnStmt, TK_RETURN] -> 84
[optionalReturn, TK_SQL] -> 85
[optionalReturn, eps] -> 85
[optionalReturn, TK_NUM] -> 85
[optionalReturn, TK_RNUM] -> 85
[optionalReturn, TK_ENDIF] -> 85
[optionalReturn, TK_ELSE] -> 85
[optionalReturn, TK_ENDWHILE] -> 85
[optionalReturn, TK_RETURN] -> 85
[optionalReturn, TK_CL] -> 85
[optionalReturn, TK_ASSIGNOP] -> 85
[optionalReturn, TK_END] -> 86
[idList, TK_ID] -> 87
[more_ids, TK_COMMA] -> 88
[more_ids, eps] -> 88
[more_ids, TK_WRITE] -> 88
[more_ids, TK_OP] -> 88
[more_ids, TK_NOT] -> 88
[more_ids, TK_NUM] -> 88
[more_ids, TK_RNUM] -> 88
[more_ids, TK_ENDIF] -> 88
[more_ids, TK_ELSE] -> 88
[more_ids, TK_ENDWHILE] -> 88
[more_ids, TK_RETURN] -> 88
[more_ids, TK_CL] -> 88
[more_ids, TK_END] -> 89
